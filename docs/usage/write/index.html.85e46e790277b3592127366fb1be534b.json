{"head":{"title":"How to write content using Phenomic","incomplete":true,"description":"You can write your files using any text based language like Markdown, AsciiDoc, Textile. Txt2tags or LaTeX. Default boilerplate provide aâ€¦"},"body":"<p>You can write your files using any text based language like\n<a href=\"https://en.wikipedia.org/wiki/Markdown\">Markdown</a>,\n<a href=\"https://en.wikipedia.org/wiki/AsciiDoc\">AsciiDoc</a>,\n<a href=\"https://en.wikipedia.org/wiki/Textile_(markup_language)\">Textile</a>.\n<a href=\"https://en.wikipedia.org/wiki/Txt2tags\">Txt2tags</a> or\n<a href=\"https://en.wikipedia.org/wiki/LaTeX\">LaTeX</a>.</p>\n<p>Default boilerplate provide a markdown engine but you can use anything you want.\nSee <a href=\"../configuration/\">Configuration</a> to know how to specify your own engine.</p>\n<p>One common thing that text files will require is a front matter that should\ncontains some meta informations about the content.</p>\n<h2 id=\"front-matter\"><a href=\"#front-matter\" class=\"phenomic-HeadingAnchor\">#</a>Front matter</h2>\n<p>Here is a review of the important fields you can use.</p>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-comment\"># title default = undefined</span>\n<span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">\"Page title\"</span>\n\n<span class=\"hljs-comment\"># layout default = \"Page\"</span>\n<span class=\"hljs-attr\">layout:</span> <span class=\"hljs-string\">\"MyComponent\"</span> <span class=\"hljs-comment\"># name referenced in `web_modules/layouts/index.js`</span>\n\n<span class=\"hljs-comment\"># route default = normalized path of the markdown file</span>\n<span class=\"hljs-comment\"># eg: content/some/thing.md =&gt; /some/thing/(index.html)</span>\n<span class=\"hljs-attr\">route:</span> my-custom-url <span class=\"hljs-comment\"># will create the file /my-custom-url/(index.html)</span>\n<span class=\"hljs-comment\"># if you provide an extension, the url won't be converted to a folder + index.html</span>\n<span class=\"hljs-comment\"># eg: route: 404.html # will create the file /404.html</span>\n<span class=\"hljs-comment\"># eg: route: something.htm # will create the file /something.htm</span>\n\n<span class=\"hljs-comment\"># note that you can add others, such as `date` or anything you want/need to</span>\n<span class=\"hljs-comment\"># sort/filter</span>\n<span class=\"hljs-meta\">---</span>\n\nPage content...</code></pre>\n<p>For the <code>title</code>, note that you can additionally use a <code>metaTitle</code> field to\nspecify a alternative <code>&lt;title&gt;</code>.\nThis allow you to have a use a <code>title</code> (<code>&lt;h1&gt;</code>?) for the page <code>&lt;body&gt;</code>,\nand <code>metaTitle</code> for the meta <code>&lt;title&gt;</code> of the page <code>&lt;head&gt;</code>.</p>\n<p><strong>For <code>layout</code>, please read <a href=\"../layouts/\">Layouts</a> documentation.</strong></p>\n<h3 id=\"front-matter-format\"><a href=\"#front-matter-format\" class=\"phenomic-HeadingAnchor\">#</a>Front matter format</h3>\n<p>Currently <strong>front matters can be written using YAML, JSON, TOML</strong> (we rely on\n<a href=\"https://www.npmjs.com/package/gray-matter\">gray-matter</a> that supports all this\nformat out of the box).</p>\n<p>You can change the language of your front matter by specifying it after the\nfirst front matter delimiter (eg: <code>---</code>).</p>\n<pre><code class=\"hljs language-json\">---json\n{\n  \"title\": \"Phenomic is awesome\"\n}\n---</code></pre>\n<h2 id=\"text-format\"><a href=\"#text-format\" class=\"phenomic-HeadingAnchor\">#</a>Text format</h2>\n<pre><code class=\"hljs language-yml\"><span class=\"hljs-meta\">---</span>\n<span class=\"hljs-attr\">title:</span> <span class=\"hljs-string\">\"Page title\"</span>\n<span class=\"hljs-meta\">---</span>\n\nHere you **can** use some _markdown_.</code></pre>\n<p>The default engine supports Markdown, but you can use whatever your want.\n<em>You will need an engine that can transform text to html.</em></p>\n<p>See <a href=\"../configuration/\">Configuration</a> to know how to specify your own engine.</p>\n","rawBody":"\nYou can write your files using any text based language like\n[Markdown](https://en.wikipedia.org/wiki/Markdown),\n[AsciiDoc](https://en.wikipedia.org/wiki/AsciiDoc),\n[Textile](https://en.wikipedia.org/wiki/Textile_(markup_language)).\n[Txt2tags](https://en.wikipedia.org/wiki/Txt2tags) or\n[LaTeX](https://en.wikipedia.org/wiki/LaTeX).\n\nDefault boilerplate provide a markdown engine but you can use anything you want.\nSee [Configuration](../configuration/) to know how to specify your own engine.\n\nOne common thing that text files will require is a front matter that should\ncontains some meta informations about the content.\n\n## Front matter\n\nHere is a review of the important fields you can use.\n\n\n```yml\n---\n# title default = undefined\ntitle: \"Page title\"\n\n# layout default = \"Page\"\nlayout: \"MyComponent\" # name referenced in `web_modules/layouts/index.js`\n\n# route default = normalized path of the markdown file\n# eg: content/some/thing.md => /some/thing/(index.html)\nroute: my-custom-url # will create the file /my-custom-url/(index.html)\n# if you provide an extension, the url won't be converted to a folder + index.html\n# eg: route: 404.html # will create the file /404.html\n# eg: route: something.htm # will create the file /something.htm\n\n# note that you can add others, such as `date` or anything you want/need to\n# sort/filter\n---\n\nPage content...\n```\n\nFor the ``title``, note that you can additionally use a ``metaTitle`` field to\nspecify a alternative ``<title>``.\nThis allow you to have a use a ``title`` (``<h1>``?) for the page ``<body>``,\nand ``metaTitle`` for the meta ``<title>`` of the page ``<head>``.\n\n**For `layout`, please read [Layouts](../layouts/) documentation.**\n\n### Front matter format\n\nCurrently **front matters can be written using YAML, JSON, TOML** (we rely on\n[gray-matter](https://www.npmjs.com/package/gray-matter) that supports all this\nformat out of the box).\n\nYou can change the language of your front matter by specifying it after the\nfirst front matter delimiter (eg: ``---``).\n\n```json\n---json\n{\n  \"title\": \"Phenomic is awesome\"\n}\n---\n```\n\n## Text format\n\n```yml\n---\ntitle: \"Page title\"\n---\n\nHere you **can** use some _markdown_.\n```\n\nThe default engine supports Markdown, but you can use whatever your want.\n_You will need an engine that can transform text to html._\n\nSee [Configuration](../configuration/) to know how to specify your own engine.\n","raw":"---\ntitle: How to write content using Phenomic\nincomplete: true\n---\n\nYou can write your files using any text based language like\n[Markdown](https://en.wikipedia.org/wiki/Markdown),\n[AsciiDoc](https://en.wikipedia.org/wiki/AsciiDoc),\n[Textile](https://en.wikipedia.org/wiki/Textile_(markup_language)).\n[Txt2tags](https://en.wikipedia.org/wiki/Txt2tags) or\n[LaTeX](https://en.wikipedia.org/wiki/LaTeX).\n\nDefault boilerplate provide a markdown engine but you can use anything you want.\nSee [Configuration](../configuration/) to know how to specify your own engine.\n\nOne common thing that text files will require is a front matter that should\ncontains some meta informations about the content.\n\n## Front matter\n\nHere is a review of the important fields you can use.\n\n\n```yml\n---\n# title default = undefined\ntitle: \"Page title\"\n\n# layout default = \"Page\"\nlayout: \"MyComponent\" # name referenced in `web_modules/layouts/index.js`\n\n# route default = normalized path of the markdown file\n# eg: content/some/thing.md => /some/thing/(index.html)\nroute: my-custom-url # will create the file /my-custom-url/(index.html)\n# if you provide an extension, the url won't be converted to a folder + index.html\n# eg: route: 404.html # will create the file /404.html\n# eg: route: something.htm # will create the file /something.htm\n\n# note that you can add others, such as `date` or anything you want/need to\n# sort/filter\n---\n\nPage content...\n```\n\nFor the ``title``, note that you can additionally use a ``metaTitle`` field to\nspecify a alternative ``<title>``.\nThis allow you to have a use a ``title`` (``<h1>``?) for the page ``<body>``,\nand ``metaTitle`` for the meta ``<title>`` of the page ``<head>``.\n\n**For `layout`, please read [Layouts](../layouts/) documentation.**\n\n### Front matter format\n\nCurrently **front matters can be written using YAML, JSON, TOML** (we rely on\n[gray-matter](https://www.npmjs.com/package/gray-matter) that supports all this\nformat out of the box).\n\nYou can change the language of your front matter by specifying it after the\nfirst front matter delimiter (eg: ``---``).\n\n```json\n---json\n{\n  \"title\": \"Phenomic is awesome\"\n}\n---\n```\n\n## Text format\n\n```yml\n---\ntitle: \"Page title\"\n---\n\nHere you **can** use some _markdown_.\n```\n\nThe default engine supports Markdown, but you can use whatever your want.\n_You will need an engine that can transform text to html._\n\nSee [Configuration](../configuration/) to know how to specify your own engine.\n","__filename":"docs/usage/write.md","__url":"/docs/usage/write/","__resourceUrl":"/docs/usage/write/index.html","__dataUrl":"/docs/usage/write/index.html.85e46e790277b3592127366fb1be534b.json"}