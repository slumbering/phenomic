{"head":{"title":"How to use configure Phenomic","description":"You have multiple things you can tweak to adjust Phenomic behavior to your needs. Phenomic configuration for built-in features Webpackâ€¦"},"body":"<p>You have multiple things you can tweak to adjust Phenomic behavior to your\nneeds.</p>\n<ul>\n<li><a href=\"#phenomic\">Phenomic configuration</a> for built-in features</li>\n<li><a href=\"#webpack\">Webpack configuration</a> to adjust behavior of consumed files\n(CSS, JS, MD...)</li>\n<li><a href=\"#react-helmet\"><code>react-helmet</code></a> to handle HTML head/meta of pages</li>\n</ul>\n<h2 id=\"phenomic\"><a href=\"#phenomic\" class=\"phenomic-HeadingAnchor\">#</a>Phenomic</h2>\n<p>The <code>package.json</code> is currently the place where you can tweak\nPhenomic built-in features.</p>\n<p>You can use the <code>package.json</code> to store most of your configuration,\nsuch as trackers for example; Google Analytics, Disqus and so on.</p>\n<p><em>Note: You can override almost every option as a CLI flag/option\n(eg: <code>--devPort=4000</code>).</em></p>\n<p>Here is a commented <code>package.json</code> with only the interesting parts\n(with default values).</p>\n<pre><code class=\"hljs language-js\">{\n  <span class=\"hljs-comment\">// tell npm that there are a lot of fields that you don't need</span>\n  <span class=\"hljs-comment\">// and prevent publishing this folder as a npm package</span>\n  <span class=\"hljs-string\">\"private\"</span>: <span class=\"hljs-literal\">true</span>,\n\n  <span class=\"hljs-comment\">// npm needs a 'dashed-name' (optional?)</span>\n  <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"YOUR-NAME-that-might-be-used-in-some-title-tags\"</span>,\n\n  <span class=\"hljs-comment\">// phenomic uses the default package.json homepage</span>\n  <span class=\"hljs-comment\">// ** it's a required field to adjust url for production build **</span>\n  <span class=\"hljs-string\">\"homepage\"</span>: <span class=\"hljs-string\">\"http://YOUR.HOSTNAME/your-base-url-if-needed/\"</span>,\n\n  <span class=\"hljs-comment\">// here is the script part, which the ones related to Phenomic</span>\n  <span class=\"hljs-comment\">// you can add more like linting and stuff like that :)</span>\n  <span class=\"hljs-string\">\"scripts\"</span>: {\n    <span class=\"hljs-string\">\"start\"</span>: <span class=\"hljs-string\">\"phenomic start\"</span>,\n    <span class=\"hljs-string\">\"build\"</span>: <span class=\"hljs-string\">\"phenomic build\"</span>,\n  },\n  <span class=\"hljs-comment\">// Note that you can provide some flags but for now they are not documented</span>\n  <span class=\"hljs-comment\">// (start and build should be enough)</span>\n  <span class=\"hljs-comment\">//</span>\n  <span class=\"hljs-comment\">// Here are some default environnement variable set by \"phenomic\" bin</span>\n  <span class=\"hljs-comment\">// DEBUG=phenomic:*</span>\n  <span class=\"hljs-comment\">//  (to get some visual feedback during development and build)</span>\n\n  <span class=\"hljs-comment\">// Phenomic core section (default values)</span>\n  <span class=\"hljs-string\">\"phenomic\"</span>: {\n    <span class=\"hljs-comment\">// current working directory</span>\n    <span class=\"hljs-comment\">// you should not need to specify this, but who knows what you will do with</span>\n    <span class=\"hljs-comment\">// it :D</span>\n    <span class=\"hljs-string\">\"cwd\"</span>: process.cwd(),\n\n    <span class=\"hljs-comment\">// Where your markdown files are</span>\n    <span class=\"hljs-string\">\"source\"</span>: <span class=\"hljs-string\">\"content\"</span>,\n\n    <span class=\"hljs-comment\">// Where to put the build files</span>\n    <span class=\"hljs-string\">\"destination\"</span>: <span class=\"hljs-string\">\"dist\"</span>,\n\n    <span class=\"hljs-comment\">// where you have your static assets</span>\n    <span class=\"hljs-comment\">// you have multiple ways to configure this field:</span>\n    <span class=\"hljs-comment\">// - simple string (relative to source folder)</span>\n    <span class=\"hljs-comment\">// - object with path (local path, relative to source) and route in web</span>\n    <span class=\"hljs-comment\">// - a boolean to disable</span>\n    <span class=\"hljs-string\">\"assets\"</span>: <span class=\"hljs-string\">\"assets\"</span>,\n\n    <span class=\"hljs-comment\">// CNAME file generated from `homepage` hostname in the destination folder</span>\n    <span class=\"hljs-comment\">// use `true` to enable</span>\n    <span class=\"hljs-string\">\"CNAME\"</span>: <span class=\"hljs-literal\">false</span>,\n\n    <span class=\"hljs-comment\">// .nojekyll file to avoid GitHub wasting time to run his default engine</span>\n    <span class=\"hljs-comment\">//   (and at the same time, allow filename prefixed by an `_`)</span>\n    <span class=\"hljs-string\">\"nojekyll\"</span>: <span class=\"hljs-literal\">true</span>,\n\n    <span class=\"hljs-comment\">// host for development</span>\n    <span class=\"hljs-string\">\"devHost\"</span>: <span class=\"hljs-string\">\"0.0.0.0\"</span>,\n\n    <span class=\"hljs-comment\">// port for development</span>\n    <span class=\"hljs-string\">\"devPort\"</span>: <span class=\"hljs-number\">3000</span>,\n\n    <span class=\"hljs-comment\">// flag to add information during development</span>\n    <span class=\"hljs-string\">\"verbose\"</span>: <span class=\"hljs-literal\">false</span>,\n\n    <span class=\"hljs-comment\">//  open a new tab when the dev server starts</span>\n    <span class=\"hljs-string\">\"open\"</span>: <span class=\"hljs-literal\">true</span>,\n\n    <span class=\"hljs-comment\">// generate offline requirements (service worker / appcache)</span>\n    <span class=\"hljs-comment\">// See docs/advanced/offline-browsing for more information</span>\n    <span class=\"hljs-string\">\"offline\"</span>: <span class=\"hljs-literal\">true</span>\n  },\n\n  <span class=\"hljs-comment\">// That's because es5 is not enough</span>\n  <span class=\"hljs-string\">\"babel\"</span>: {\n    <span class=\"hljs-string\">\"presets\"</span>: [\n      <span class=\"hljs-string\">\"babel-preset-react\"</span>,\n      <span class=\"hljs-string\">\"babel-preset-es2015\"</span>,\n      <span class=\"hljs-string\">\"babel-preset-stage-1\"</span>\n    ],\n  },\n\n  <span class=\"hljs-comment\">// linting prevent errors</span>\n  <span class=\"hljs-comment\">// See 'Good practices' section.</span>\n  <span class=\"hljs-string\">\"eslintConfig\"</span>: {\n    <span class=\"hljs-comment\">// ...</span>\n  },\n  <span class=\"hljs-string\">\"stylelint\"</span>: {\n    <span class=\"hljs-comment\">// ...</span>\n  }\n}</code></pre>\n<h2 id=\"webpack\"><a href=\"#webpack\" class=\"phenomic-HeadingAnchor\">#</a>Webpack</h2>\n<p>The parts that you can tweak in <code>package.json</code> are just the tip of the iceberg.\nThere is a lot you can do depending on your use case.</p>\n<p>If you want to change stuff like CSS or JS preprocessors or linters, you might\nwant to edit the <em>webpack configuration</em> (<code>webpack.config.babel.js</code>).</p>\n<p><em>Be sure to check out the <a href=\"http://webpack.github.io/docs/\">webpack documentation</a>.</em></p>\n<p>Keep in mind that Phenomic will add some pieces to the final webpack\nconfiguration to fit its requirements.</p>\n<h3 id=\"content-loader\"><a href=\"#content-loader\" class=\"phenomic-HeadingAnchor\">#</a><code>content-loader</code></h3>\n<p>One particular piece of the webpack configuration is important for Phenomic.\nThe section that defines a loader for <code>.md</code> files (or any other text format)\nis crucial (in the default boilerplate, it&#x27;s the first loader) :</p>\n<ul>\n<li>it allows you to control what text engine to use\n(default to Markdown using <a href=\"http://remark.js.org/\">remark</a>\nusing a solid <a href=\"https://github.com/MoOx/phenomic/blob/master/src/content-loader/default-renderer.js\">default</a>)</li>\n<li>it allows you to generate some RSS feeds</li>\n</ul>\n<p>There is two ways to send option to the <code>content-loader</code>:</p>\n<ul>\n<li>use webpack loader <code>query</code> option (<em>not recommended</em>, see below)</li>\n<li>use a <code>phenomic.contentLoader</code> section in webpack configuration.</li>\n</ul>\n<p><strong>The last method is recommended because <code>query</code> cannot contains (and ignores\nwithout warnings) things that are not JSON (eg: functions).</strong>\nAnd to use a custom renderer, you might need to use a function.</p>\n<p>Here is a commented part of a webpack configuration that use all options</p>\n<pre><code class=\"hljs language-js\"><span class=\"hljs-comment\">//...</span>\n\n<span class=\"hljs-keyword\">import</span> pkg <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"./package.json\"</span>\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">const</span> makeConfig = (config = {}) =&gt; {\n  <span class=\"hljs-keyword\">return</span> {\n    <span class=\"hljs-comment\">// ...</span>\n    <span class=\"hljs-built_in\">module</span>: {\n      loaders: [\n        {\n          test: <span class=\"hljs-regexp\">/\\.md$/</span>,\n          loader: <span class=\"hljs-string\">\"phenomic/lib/content-loader\"</span>,\n\n          <span class=\"hljs-comment\">// you can also define options here, but functions will be silently</span>\n          <span class=\"hljs-comment\">// ignored because how webpack works</span>\n          <span class=\"hljs-comment\">// query: {</span>\n          <span class=\"hljs-comment\">//   ...</span>\n          <span class=\"hljs-comment\">// }</span>\n        },\n        <span class=\"hljs-comment\">// ...</span>\n      ],\n    },\n\n    phenomic: {\n      contentLoader: {\n\n        <span class=\"hljs-comment\">// the context where to read .md to</span>\n        context: path.join(__dirname, config.source),\n\n        renderer: (text) =&gt; {\n          <span class=\"hljs-comment\">// here you can use whatever engine you want,</span>\n          <span class=\"hljs-comment\">// you just need to return some HTML</span>\n          <span class=\"hljs-keyword\">return</span> html\n        }\n\n        <span class=\"hljs-comment\">// RSS global options</span>\n        feedsOptions: {\n          title: pkg.name,\n          site_url: pkg.homepage,\n        },\n\n        feeds: {\n          <span class=\"hljs-comment\">// RSS</span>\n          <span class=\"hljs-string\">\"feed.xml\"</span>: {\n            collectionOptions: {\n              <span class=\"hljs-comment\">// here, you can filter using</span>\n              <span class=\"hljs-comment\">// phenomic/lib/enhance-collection API</span>\n              <span class=\"hljs-comment\">// see /docs/usage/collections/</span>\n              filter: { layout: <span class=\"hljs-string\">\"Post\"</span> },\n              sort: <span class=\"hljs-string\">\"date\"</span>,\n              reverse: <span class=\"hljs-literal\">true</span>,\n              limit: <span class=\"hljs-number\">20</span>,\n            },\n          },\n        },\n      },\n    },\n    <span class=\"hljs-comment\">// ...</span>\n  }\n}</code></pre>\n<h2 id=\"react-helmet\"><a href=\"#react-helmet\" class=\"phenomic-HeadingAnchor\">#</a>React-Helmet</h2>\n<p><a href=\"https://github.com/nfl/react-helmet\">React-Helmet</a> is the best document head\nmanager available for React that allows you to manage all of your definitions\nand changes to your documents head with support for\n<em>document title, meta, link, script, and base tags.</em>\nIt&#x27;s like <code>react-document-title</code> but on steroid.</p>\n<p>The default boilerplate uses <code>react-helmet</code> in several places\n(look for <code>&lt;Helmet</code> usage).</p>\n<p><a href=\"https://github.com/nfl/react-helmet#readme\">To know more about how to use <code>react-helmet</code>, please read the documentation</a></p>\n<hr>\n<p><strong>We might add some common changes you would like to make here. Feel free to\nopen issues if you don&#x27;t know how to make some changes.</strong></p>\n","rawBody":"\nYou have multiple things you can tweak to adjust Phenomic behavior to your\nneeds.\n\n- [Phenomic configuration](#phenomic) for built-in features\n- [Webpack configuration](#webpack) to adjust behavior of consumed files\n  (CSS, JS, MD...)\n- [``react-helmet``](#react-helmet) to handle HTML head/meta of pages\n\n## Phenomic\n\nThe ``package.json`` is currently the place where you can tweak\nPhenomic built-in features.\n\nYou can use the ``package.json`` to store most of your configuration,\nsuch as trackers for example; Google Analytics, Disqus and so on.\n\n_Note: You can override almost every option as a CLI flag/option\n(eg: ``--devPort=4000``)._\n\nHere is a commented ``package.json`` with only the interesting parts\n(with default values).\n\n```js\n{\n  // tell npm that there are a lot of fields that you don't need\n  // and prevent publishing this folder as a npm package\n  \"private\": true,\n\n  // npm needs a 'dashed-name' (optional?)\n  \"name\": \"YOUR-NAME-that-might-be-used-in-some-title-tags\",\n\n  // phenomic uses the default package.json homepage\n  // ** it's a required field to adjust url for production build **\n  \"homepage\": \"http://YOUR.HOSTNAME/your-base-url-if-needed/\",\n\n  // here is the script part, which the ones related to Phenomic\n  // you can add more like linting and stuff like that :)\n  \"scripts\": {\n    \"start\": \"phenomic start\",\n    \"build\": \"phenomic build\",\n  },\n  // Note that you can provide some flags but for now they are not documented\n  // (start and build should be enough)\n  //\n  // Here are some default environnement variable set by \"phenomic\" bin\n  // DEBUG=phenomic:*\n  //  (to get some visual feedback during development and build)\n\n  // Phenomic core section (default values)\n  \"phenomic\": {\n    // current working directory\n    // you should not need to specify this, but who knows what you will do with\n    // it :D\n    \"cwd\": process.cwd(),\n\n    // Where your markdown files are\n    \"source\": \"content\",\n\n    // Where to put the build files\n    \"destination\": \"dist\",\n\n    // where you have your static assets\n    // you have multiple ways to configure this field:\n    // - simple string (relative to source folder)\n    // - object with path (local path, relative to source) and route in web\n    // - a boolean to disable\n    \"assets\": \"assets\",\n\n    // CNAME file generated from `homepage` hostname in the destination folder\n    // use `true` to enable\n    \"CNAME\": false,\n\n    // .nojekyll file to avoid GitHub wasting time to run his default engine\n    //   (and at the same time, allow filename prefixed by an `_`)\n    \"nojekyll\": true,\n\n    // host for development\n    \"devHost\": \"0.0.0.0\",\n\n    // port for development\n    \"devPort\": 3000,\n\n    // flag to add information during development\n    \"verbose\": false,\n\n    //  open a new tab when the dev server starts\n    \"open\": true,\n\n    // generate offline requirements (service worker / appcache)\n    // See docs/advanced/offline-browsing for more information\n    \"offline\": true\n  },\n\n  // That's because es5 is not enough\n  \"babel\": {\n    \"presets\": [\n      \"babel-preset-react\",\n      \"babel-preset-es2015\",\n      \"babel-preset-stage-1\"\n    ],\n  },\n\n  // linting prevent errors\n  // See 'Good practices' section.\n  \"eslintConfig\": {\n    // ...\n  },\n  \"stylelint\": {\n    // ...\n  }\n}\n```\n\n## Webpack\n\nThe parts that you can tweak in ``package.json`` are just the tip of the iceberg.\nThere is a lot you can do depending on your use case.\n\nIf you want to change stuff like CSS or JS preprocessors or linters, you might\nwant to edit the _webpack configuration_ (``webpack.config.babel.js``).\n\n_Be sure to check out the [webpack documentation](http://webpack.github.io/docs/)._\n\nKeep in mind that Phenomic will add some pieces to the final webpack\nconfiguration to fit its requirements.\n\n### ``content-loader``\n\nOne particular piece of the webpack configuration is important for Phenomic.\nThe section that defines a loader for ``.md`` files (or any other text format)\nis crucial (in the default boilerplate, it's the first loader) :\n\n- it allows you to control what text engine to use\n  (default to Markdown using [remark](http://remark.js.org/)\n  using a solid [default](https://github.com/MoOx/phenomic/blob/master/src/content-loader/default-renderer.js))\n- it allows you to generate some RSS feeds\n\nThere is two ways to send option to the ``content-loader``:\n\n- use webpack loader ``query`` option (_not recommended_, see below)\n- use a ``phenomic.contentLoader`` section in webpack configuration.\n\n**The last method is recommended because ``query`` cannot contains (and ignores\nwithout warnings) things that are not JSON (eg: functions).**\nAnd to use a custom renderer, you might need to use a function.\n\n\nHere is a commented part of a webpack configuration that use all options\n\n```js\n//...\n\nimport pkg from \"./package.json\"\n\nexport const makeConfig = (config = {}) => {\n  return {\n    // ...\n    module: {\n      loaders: [\n        {\n          test: /\\.md$/,\n          loader: \"phenomic/lib/content-loader\",\n\n          // you can also define options here, but functions will be silently\n          // ignored because how webpack works\n          // query: {\n          //   ...\n          // }\n        },\n        // ...\n      ],\n    },\n\n    phenomic: {\n      contentLoader: {\n\n        // the context where to read .md to\n        context: path.join(__dirname, config.source),\n\n        renderer: (text) => {\n          // here you can use whatever engine you want,\n          // you just need to return some HTML\n          return html\n        }\n\n        // RSS global options\n        feedsOptions: {\n          title: pkg.name,\n          site_url: pkg.homepage,\n        },\n\n        feeds: {\n          // RSS\n          \"feed.xml\": {\n            collectionOptions: {\n              // here, you can filter using\n              // phenomic/lib/enhance-collection API\n              // see /docs/usage/collections/\n              filter: { layout: \"Post\" },\n              sort: \"date\",\n              reverse: true,\n              limit: 20,\n            },\n          },\n        },\n      },\n    },\n    // ...\n  }\n}\n```\n\n\n## React-Helmet\n\n[React-Helmet](https://github.com/nfl/react-helmet) is the best document head\nmanager available for React that allows you to manage all of your definitions\nand changes to your documents head with support for\n_document title, meta, link, script, and base tags._\nIt's like ``react-document-title`` but on steroid.\n\nThe default boilerplate uses ``react-helmet`` in several places\n(look for ``<Helmet`` usage).\n\n[To know more about how to use ``react-helmet``, please read the documentation](https://github.com/nfl/react-helmet#readme)\n\n---\n\n**We might add some common changes you would like to make here. Feel free to\nopen issues if you don't know how to make some changes.**\n","raw":"---\ntitle: How to use configure Phenomic\n---\n\nYou have multiple things you can tweak to adjust Phenomic behavior to your\nneeds.\n\n- [Phenomic configuration](#phenomic) for built-in features\n- [Webpack configuration](#webpack) to adjust behavior of consumed files\n  (CSS, JS, MD...)\n- [``react-helmet``](#react-helmet) to handle HTML head/meta of pages\n\n## Phenomic\n\nThe ``package.json`` is currently the place where you can tweak\nPhenomic built-in features.\n\nYou can use the ``package.json`` to store most of your configuration,\nsuch as trackers for example; Google Analytics, Disqus and so on.\n\n_Note: You can override almost every option as a CLI flag/option\n(eg: ``--devPort=4000``)._\n\nHere is a commented ``package.json`` with only the interesting parts\n(with default values).\n\n```js\n{\n  // tell npm that there are a lot of fields that you don't need\n  // and prevent publishing this folder as a npm package\n  \"private\": true,\n\n  // npm needs a 'dashed-name' (optional?)\n  \"name\": \"YOUR-NAME-that-might-be-used-in-some-title-tags\",\n\n  // phenomic uses the default package.json homepage\n  // ** it's a required field to adjust url for production build **\n  \"homepage\": \"http://YOUR.HOSTNAME/your-base-url-if-needed/\",\n\n  // here is the script part, which the ones related to Phenomic\n  // you can add more like linting and stuff like that :)\n  \"scripts\": {\n    \"start\": \"phenomic start\",\n    \"build\": \"phenomic build\",\n  },\n  // Note that you can provide some flags but for now they are not documented\n  // (start and build should be enough)\n  //\n  // Here are some default environnement variable set by \"phenomic\" bin\n  // DEBUG=phenomic:*\n  //  (to get some visual feedback during development and build)\n\n  // Phenomic core section (default values)\n  \"phenomic\": {\n    // current working directory\n    // you should not need to specify this, but who knows what you will do with\n    // it :D\n    \"cwd\": process.cwd(),\n\n    // Where your markdown files are\n    \"source\": \"content\",\n\n    // Where to put the build files\n    \"destination\": \"dist\",\n\n    // where you have your static assets\n    // you have multiple ways to configure this field:\n    // - simple string (relative to source folder)\n    // - object with path (local path, relative to source) and route in web\n    // - a boolean to disable\n    \"assets\": \"assets\",\n\n    // CNAME file generated from `homepage` hostname in the destination folder\n    // use `true` to enable\n    \"CNAME\": false,\n\n    // .nojekyll file to avoid GitHub wasting time to run his default engine\n    //   (and at the same time, allow filename prefixed by an `_`)\n    \"nojekyll\": true,\n\n    // host for development\n    \"devHost\": \"0.0.0.0\",\n\n    // port for development\n    \"devPort\": 3000,\n\n    // flag to add information during development\n    \"verbose\": false,\n\n    //  open a new tab when the dev server starts\n    \"open\": true,\n\n    // generate offline requirements (service worker / appcache)\n    // See docs/advanced/offline-browsing for more information\n    \"offline\": true\n  },\n\n  // That's because es5 is not enough\n  \"babel\": {\n    \"presets\": [\n      \"babel-preset-react\",\n      \"babel-preset-es2015\",\n      \"babel-preset-stage-1\"\n    ],\n  },\n\n  // linting prevent errors\n  // See 'Good practices' section.\n  \"eslintConfig\": {\n    // ...\n  },\n  \"stylelint\": {\n    // ...\n  }\n}\n```\n\n## Webpack\n\nThe parts that you can tweak in ``package.json`` are just the tip of the iceberg.\nThere is a lot you can do depending on your use case.\n\nIf you want to change stuff like CSS or JS preprocessors or linters, you might\nwant to edit the _webpack configuration_ (``webpack.config.babel.js``).\n\n_Be sure to check out the [webpack documentation](http://webpack.github.io/docs/)._\n\nKeep in mind that Phenomic will add some pieces to the final webpack\nconfiguration to fit its requirements.\n\n### ``content-loader``\n\nOne particular piece of the webpack configuration is important for Phenomic.\nThe section that defines a loader for ``.md`` files (or any other text format)\nis crucial (in the default boilerplate, it's the first loader) :\n\n- it allows you to control what text engine to use\n  (default to Markdown using [remark](http://remark.js.org/)\n  using a solid [default](https://github.com/MoOx/phenomic/blob/master/src/content-loader/default-renderer.js))\n- it allows you to generate some RSS feeds\n\nThere is two ways to send option to the ``content-loader``:\n\n- use webpack loader ``query`` option (_not recommended_, see below)\n- use a ``phenomic.contentLoader`` section in webpack configuration.\n\n**The last method is recommended because ``query`` cannot contains (and ignores\nwithout warnings) things that are not JSON (eg: functions).**\nAnd to use a custom renderer, you might need to use a function.\n\n\nHere is a commented part of a webpack configuration that use all options\n\n```js\n//...\n\nimport pkg from \"./package.json\"\n\nexport const makeConfig = (config = {}) => {\n  return {\n    // ...\n    module: {\n      loaders: [\n        {\n          test: /\\.md$/,\n          loader: \"phenomic/lib/content-loader\",\n\n          // you can also define options here, but functions will be silently\n          // ignored because how webpack works\n          // query: {\n          //   ...\n          // }\n        },\n        // ...\n      ],\n    },\n\n    phenomic: {\n      contentLoader: {\n\n        // the context where to read .md to\n        context: path.join(__dirname, config.source),\n\n        renderer: (text) => {\n          // here you can use whatever engine you want,\n          // you just need to return some HTML\n          return html\n        }\n\n        // RSS global options\n        feedsOptions: {\n          title: pkg.name,\n          site_url: pkg.homepage,\n        },\n\n        feeds: {\n          // RSS\n          \"feed.xml\": {\n            collectionOptions: {\n              // here, you can filter using\n              // phenomic/lib/enhance-collection API\n              // see /docs/usage/collections/\n              filter: { layout: \"Post\" },\n              sort: \"date\",\n              reverse: true,\n              limit: 20,\n            },\n          },\n        },\n      },\n    },\n    // ...\n  }\n}\n```\n\n\n## React-Helmet\n\n[React-Helmet](https://github.com/nfl/react-helmet) is the best document head\nmanager available for React that allows you to manage all of your definitions\nand changes to your documents head with support for\n_document title, meta, link, script, and base tags._\nIt's like ``react-document-title`` but on steroid.\n\nThe default boilerplate uses ``react-helmet`` in several places\n(look for ``<Helmet`` usage).\n\n[To know more about how to use ``react-helmet``, please read the documentation](https://github.com/nfl/react-helmet#readme)\n\n---\n\n**We might add some common changes you would like to make here. Feel free to\nopen issues if you don't know how to make some changes.**\n","__filename":"docs/usage/configuration.md","__url":"/docs/usage/configuration/","__resourceUrl":"/docs/usage/configuration/index.html","__dataUrl":"/docs/usage/configuration/index.html.12b62096b5d42707767f4a2cd7bb1a21.json"}