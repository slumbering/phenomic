{"head":{"title":"How to style your app/website in Phenomic","description":"Syntax and Architecture The default boilerplate allows you to write by default stylesheets with two different approaches: Global (normal…"},"body":"<h2 id=\"syntax-and-architecture\"><a href=\"#syntax-and-architecture\" class=\"phenomic-HeadingAnchor\">#</a>Syntax and Architecture</h2>\n<p>The default boilerplate allows you to write by default stylesheets with two\ndifferent approaches:\nGlobal (normal) CSS and/or\n<a href=\"#css-modules\">CSS modules</a>.</p>\n<p>It also includes\n<a href=\"#postcss\">PostCSS</a>\nwith\n<a href=\"#cssnext\">cssnext</a>\nso you have a built-in modular CSS pre-processor.</p>\n<blockquote>\n<p>It&#x27;s very easy to add another pre-processor like Sass or LESS.\nYou can look directly in the default <code>webpack.config.js</code> and look for the\nCSS section. A commented part is waiting for you with lot&#x27;s of comments so\nyou can adjust to your need.</p>\n</blockquote>\n<p>The future-proof syntax / Local CSS is the recommended solution that play nice\nwith React.</p>\n<p><strong>Not that the default CSS loaders only apply to <code>web_modules</code> folder.\nIf you want to consume CSS from <code>node_modules</code>, you should adjust the\nwebpack configuration (a commented piece of code should be waiting for you).</strong></p>\n<hr>\n<h3 id=\"global-css\"><a href=\"#global-css\" class=\"phenomic-HeadingAnchor\">#</a>Global CSS</h3>\n<p>All files that ends with <code>.global.css</code> will be considered as normal CSS.\nThis is relevant for reset/normalize, global styles on html and body,\nand also for markup you don&#x27;t control (eg: highlighted code in your markdown).</p>\n<h3 id=\"css-modules\"><a href=\"#css-modules\" class=\"phenomic-HeadingAnchor\">#</a>CSS Modules</h3>\n<p><a href=\"https://github.com/css-modules/css-modules\">CSS modules</a>\nallows you to have generated local CSS classnames in your React components.\nThis ensure that classnames are local to your components and unique.</p>\n<blockquote>\n<p>The way the web and UI are evolving is clearly by following a component\napproach.\nYou should think about UI modules and styles your component one by one.</p>\n</blockquote>\n<p>If you need some global CSS variables in your modules,\n<a href=\"http://cssnext.io/usage/#features\">you can add some by tweaking cssnext configuration</a>\nin the <code>postcss</code> section of the webpack configuration.</p>\n<hr>\n<h3 id=\"postcss\"><a href=\"#postcss\" class=\"phenomic-HeadingAnchor\">#</a>PostCSS</h3>\n<p><a href=\"https://github.com/postcss/postcss\">PostCSS</a>\nis a modular tool that allows you to use future-proof and custom CSS syntax\n(by default, <a href=\"http://cssnext.io/\">postcss-cssnext</a> is enabled so you can use\na lot of new CSS features).</p>\n<h3 id=\"cssnext\"><a href=\"#cssnext\" class=\"phenomic-HeadingAnchor\">#</a>cssnext</h3>\n<p><a href=\"http://cssnext.io/\">cssnext</a>\nis a PostCSS plugin that helps you to use the latest CSS syntax today.\nIt transforms new CSS specs into more compatible CSS so you don&#x27;t need to wait\nfor browser support.</p>\n<p><strong>ProTip™</strong>: For your layout, we advise you to use\n<a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\">Flexbox</a>\nwhenever you can.</p>\n<p><em>If you think this brief documentation is not enough, feel free to open an\nissue.</em></p>\n<h3 id=\"why-not-inline-styles-instead-of-css\"><a href=\"#why-not-inline-styles-instead-of-css\" class=\"phenomic-HeadingAnchor\">#</a>Why not inline styles instead of CSS?</h3>\n<p>Unfortunately, inline styles don&#x27;t play well with pre-rendering for now. When\nwe build the static version, we don&#x27;t know where the site will be viewed on, so\nviewport adjustments can&#x27;t be done properly and will therefore result in some\nvisual changes/re-rendering.</p>\n<p>You can probably provide a fairly decent user experience with smooth\nre-rendering, but it isn&#x27;t an easy task. However, please feel free to open an\nissue to discuss it if you think that this isn&#x27;t the case!</p>\n","rawBody":"\n## Syntax and Architecture\n\nThe default boilerplate allows you to write by default stylesheets with two\ndifferent approaches:\nGlobal (normal) CSS and/or\n[CSS modules](#css-modules).\n\nIt also includes\n[PostCSS](#postcss)\nwith\n[cssnext](#cssnext)\nso you have a built-in modular CSS pre-processor.\n\n> It's very easy to add another pre-processor like Sass or LESS.\n> You can look directly in the default ``webpack.config.js`` and look for the\n> CSS section. A commented part is waiting for you with lot's of comments so\n> you can adjust to your need.\n\nThe future-proof syntax / Local CSS is the recommended solution that play nice\nwith React.\n\n**Not that the default CSS loaders only apply to ``web_modules`` folder.\nIf you want to consume CSS from ``node_modules``, you should adjust the\nwebpack configuration (a commented piece of code should be waiting for you).**\n\n---\n\n### Global CSS\n\nAll files that ends with ``.global.css`` will be considered as normal CSS.\nThis is relevant for reset/normalize, global styles on html and body,\nand also for markup you don't control (eg: highlighted code in your markdown).\n\n### CSS Modules\n\n[CSS modules](https://github.com/css-modules/css-modules)\nallows you to have generated local CSS classnames in your React components.\nThis ensure that classnames are local to your components and unique.\n\n> The way the web and UI are evolving is clearly by following a component\n> approach.\n> You should think about UI modules and styles your component one by one.\n\nIf you need some global CSS variables in your modules,\n[you can add some by tweaking cssnext configuration](http://cssnext.io/usage/#features)\nin the ``postcss`` section of the webpack configuration.\n\n---\n\n### PostCSS\n\n[PostCSS](https://github.com/postcss/postcss)\nis a modular tool that allows you to use future-proof and custom CSS syntax\n(by default, [postcss-cssnext](http://cssnext.io/) is enabled so you can use\na lot of new CSS features).\n\n### cssnext\n\n[cssnext](http://cssnext.io/)\nis a PostCSS plugin that helps you to use the latest CSS syntax today.\nIt transforms new CSS specs into more compatible CSS so you don't need to wait\nfor browser support.\n\n**ProTip™**: For your layout, we advise you to use\n[Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\nwhenever you can.\n\n_If you think this brief documentation is not enough, feel free to open an\nissue._\n\n### Why not inline styles instead of CSS?\n\nUnfortunately, inline styles don't play well with pre-rendering for now. When\nwe build the static version, we don't know where the site will be viewed on, so\nviewport adjustments can't be done properly and will therefore result in some\nvisual changes/re-rendering.\n\nYou can probably provide a fairly decent user experience with smooth\nre-rendering, but it isn't an easy task. However, please feel free to open an\nissue to discuss it if you think that this isn't the case!\n","raw":"---\ntitle: How to style your app/website in Phenomic\n---\n\n## Syntax and Architecture\n\nThe default boilerplate allows you to write by default stylesheets with two\ndifferent approaches:\nGlobal (normal) CSS and/or\n[CSS modules](#css-modules).\n\nIt also includes\n[PostCSS](#postcss)\nwith\n[cssnext](#cssnext)\nso you have a built-in modular CSS pre-processor.\n\n> It's very easy to add another pre-processor like Sass or LESS.\n> You can look directly in the default ``webpack.config.js`` and look for the\n> CSS section. A commented part is waiting for you with lot's of comments so\n> you can adjust to your need.\n\nThe future-proof syntax / Local CSS is the recommended solution that play nice\nwith React.\n\n**Not that the default CSS loaders only apply to ``web_modules`` folder.\nIf you want to consume CSS from ``node_modules``, you should adjust the\nwebpack configuration (a commented piece of code should be waiting for you).**\n\n---\n\n### Global CSS\n\nAll files that ends with ``.global.css`` will be considered as normal CSS.\nThis is relevant for reset/normalize, global styles on html and body,\nand also for markup you don't control (eg: highlighted code in your markdown).\n\n### CSS Modules\n\n[CSS modules](https://github.com/css-modules/css-modules)\nallows you to have generated local CSS classnames in your React components.\nThis ensure that classnames are local to your components and unique.\n\n> The way the web and UI are evolving is clearly by following a component\n> approach.\n> You should think about UI modules and styles your component one by one.\n\nIf you need some global CSS variables in your modules,\n[you can add some by tweaking cssnext configuration](http://cssnext.io/usage/#features)\nin the ``postcss`` section of the webpack configuration.\n\n---\n\n### PostCSS\n\n[PostCSS](https://github.com/postcss/postcss)\nis a modular tool that allows you to use future-proof and custom CSS syntax\n(by default, [postcss-cssnext](http://cssnext.io/) is enabled so you can use\na lot of new CSS features).\n\n### cssnext\n\n[cssnext](http://cssnext.io/)\nis a PostCSS plugin that helps you to use the latest CSS syntax today.\nIt transforms new CSS specs into more compatible CSS so you don't need to wait\nfor browser support.\n\n**ProTip™**: For your layout, we advise you to use\n[Flexbox](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\nwhenever you can.\n\n_If you think this brief documentation is not enough, feel free to open an\nissue._\n\n### Why not inline styles instead of CSS?\n\nUnfortunately, inline styles don't play well with pre-rendering for now. When\nwe build the static version, we don't know where the site will be viewed on, so\nviewport adjustments can't be done properly and will therefore result in some\nvisual changes/re-rendering.\n\nYou can probably provide a fairly decent user experience with smooth\nre-rendering, but it isn't an easy task. However, please feel free to open an\nissue to discuss it if you think that this isn't the case!\n","__filename":"docs/usage/styling.md","__url":"/docs/usage/styling/","__resourceUrl":"/docs/usage/styling/index.html","__dataUrl":"/docs/usage/styling/index.html.0a5c79d2ae800f0e979e2e3eb13e3b40.json"}