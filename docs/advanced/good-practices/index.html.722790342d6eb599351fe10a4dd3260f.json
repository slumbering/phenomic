{"head":{"title":"Good practices","description":"Linting Our boilerplate comes with best-in-class tools for linting both JavaScript and CSS. Linting your code is a good practice because itâ€¦"},"body":"<h2 id=\"linting\"><a href=\"#linting\" class=\"phenomic-HeadingAnchor\">#</a>Linting</h2>\n<p>Our boilerplate comes with best-in-class tools for linting both JavaScript\nand CSS. Linting your code is a good practice because it reduces the probability\nof errors and helps to enforce code consistency.</p>\n<h2 id=\"javascript-linting\"><a href=\"#javascript-linting\" class=\"phenomic-HeadingAnchor\">#</a>JavaScript Linting</h2>\n<p><a href=\"http://eslint.org/\">ESLint</a> is a must have JavaScript linter; the default\nboilerplate provides you with a nice <a href=\"https://github.com/MoOx/eslint-config-i-am-meticulous\">standard set of rules</a>\nfor ES2015+ &amp; React.</p>\n<p>That being said, you might want less rules (or semicolons).</p>\n<h3 id=\"less-strict-javascript-linting\"><a href=\"#less-strict-javascript-linting\" class=\"phenomic-HeadingAnchor\">#</a>Less strict JavaScript linting</h3>\n<p>To remove the default config, you can replace the <code>eslintConfig</code> in your\n<code>package.json</code> with the following config:</p>\n<pre><code class=\"hljs language-json\">{\n  <span class=\"hljs-attr\">\"eslintConfig\"</span>: {\n    <span class=\"hljs-attr\">\"parser\"</span>: <span class=\"hljs-string\">\"babel-eslint\"</span>,\n    <span class=\"hljs-attr\">\"extends\"</span>: <span class=\"hljs-string\">\"eslint:recommended\"</span>,\n    <span class=\"hljs-attr\">\"parserOptions\"</span>: {\n      <span class=\"hljs-attr\">\"ecmaVersion\"</span>: <span class=\"hljs-number\">6</span>,\n      <span class=\"hljs-attr\">\"sourceType\"</span>: <span class=\"hljs-string\">\"module\"</span>,\n      <span class=\"hljs-attr\">\"ecmaFeatures\"</span>: {\n        <span class=\"hljs-attr\">\"experimentalObjectRestSpread\"</span>: <span class=\"hljs-literal\">true</span>\n      },\n    },\n    <span class=\"hljs-attr\">\"env\"</span>: {\n      <span class=\"hljs-attr\">\"node\"</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">\"browser\"</span>: <span class=\"hljs-literal\">true</span>,\n      <span class=\"hljs-attr\">\"es6\"</span>: <span class=\"hljs-literal\">true</span>\n    }\n  }\n}</code></pre>\n<p>In this example, we used <code>eslint:recommended</code>, but feel free to use one of the\n<a href=\"https://www.npmjs.com/search?q=eslint-config\">many existing configs</a>.\nHere are some &quot;popular&quot; configs:</p>\n<ul>\n<li><a href=\"https://github.com/feross/eslint-config-standard\">https://github.com/feross/eslint-config-standard</a></li>\n<li><a href=\"https://github.com/feross/eslint-config-standard-react\">https://github.com/feross/eslint-config-standard-react</a></li>\n<li><a href=\"https://github.com/sindresorhus/eslint-config-xo\">https://github.com/sindresorhus/eslint-config-xo</a></li>\n<li><a href=\"https://github.com/sindresorhus/eslint-config-xo-react\">https://github.com/sindresorhus/eslint-config-xo-react</a></li>\n</ul>\n<p>If you switch to one of these configurations, you might get some linting errors.\nTo fix this, simply use the following command:</p>\n<pre><code class=\"hljs language-console\">$ ./node_modules/.bin/eslint --fix .</code></pre>\n<p>This will fix all the errors that ESLint or its plugins can handle.</p>\n<h2 id=\"css-linting\"><a href=\"#css-linting\" class=\"phenomic-HeadingAnchor\">#</a>CSS Linting</h2>\n<p><a href=\"http://stylelint.io/\">stylelint</a> is a must have CSS linter; the default\nboilerplate provides you with a nice <a href=\"https://github.com/stylelint/stylelint-config-standard\">standard set of rules</a>\nfor modern CSS development.</p>\n","rawBody":"\n## Linting\n\nOur boilerplate comes with best-in-class tools for linting both JavaScript\nand CSS. Linting your code is a good practice because it reduces the probability\nof errors and helps to enforce code consistency.\n\n## JavaScript Linting\n\n[ESLint](http://eslint.org/) is a must have JavaScript linter; the default\nboilerplate provides you with a nice [standard set of rules](https://github.com/MoOx/eslint-config-i-am-meticulous)\nfor ES2015+ & React.\n\nThat being said, you might want less rules (or semicolons).\n\n### Less strict JavaScript linting\n\nTo remove the default config, you can replace the ``eslintConfig`` in your\n``package.json`` with the following config:\n\n```json\n{\n  \"eslintConfig\": {\n    \"parser\": \"babel-eslint\",\n    \"extends\": \"eslint:recommended\",\n    \"parserOptions\": {\n      \"ecmaVersion\": 6,\n      \"sourceType\": \"module\",\n      \"ecmaFeatures\": {\n        \"experimentalObjectRestSpread\": true\n      },\n    },\n    \"env\": {\n      \"node\": true,\n      \"browser\": true,\n      \"es6\": true\n    }\n  }\n}\n```\n\nIn this example, we used ``eslint:recommended``, but feel free to use one of the\n[many existing configs](https://www.npmjs.com/search?q=eslint-config).\nHere are some \"popular\" configs:\n\n- https://github.com/feross/eslint-config-standard\n- https://github.com/feross/eslint-config-standard-react\n- https://github.com/sindresorhus/eslint-config-xo\n- https://github.com/sindresorhus/eslint-config-xo-react\n\nIf you switch to one of these configurations, you might get some linting errors.\nTo fix this, simply use the following command:\n\n```console\n$ ./node_modules/.bin/eslint --fix .\n```\n\nThis will fix all the errors that ESLint or its plugins can handle.\n\n## CSS Linting\n\n[stylelint](http://stylelint.io/) is a must have CSS linter; the default\nboilerplate provides you with a nice [standard set of rules](https://github.com/stylelint/stylelint-config-standard)\nfor modern CSS development.\n","raw":"---\ntitle: Good practices\n---\n\n## Linting\n\nOur boilerplate comes with best-in-class tools for linting both JavaScript\nand CSS. Linting your code is a good practice because it reduces the probability\nof errors and helps to enforce code consistency.\n\n## JavaScript Linting\n\n[ESLint](http://eslint.org/) is a must have JavaScript linter; the default\nboilerplate provides you with a nice [standard set of rules](https://github.com/MoOx/eslint-config-i-am-meticulous)\nfor ES2015+ & React.\n\nThat being said, you might want less rules (or semicolons).\n\n### Less strict JavaScript linting\n\nTo remove the default config, you can replace the ``eslintConfig`` in your\n``package.json`` with the following config:\n\n```json\n{\n  \"eslintConfig\": {\n    \"parser\": \"babel-eslint\",\n    \"extends\": \"eslint:recommended\",\n    \"parserOptions\": {\n      \"ecmaVersion\": 6,\n      \"sourceType\": \"module\",\n      \"ecmaFeatures\": {\n        \"experimentalObjectRestSpread\": true\n      },\n    },\n    \"env\": {\n      \"node\": true,\n      \"browser\": true,\n      \"es6\": true\n    }\n  }\n}\n```\n\nIn this example, we used ``eslint:recommended``, but feel free to use one of the\n[many existing configs](https://www.npmjs.com/search?q=eslint-config).\nHere are some \"popular\" configs:\n\n- https://github.com/feross/eslint-config-standard\n- https://github.com/feross/eslint-config-standard-react\n- https://github.com/sindresorhus/eslint-config-xo\n- https://github.com/sindresorhus/eslint-config-xo-react\n\nIf you switch to one of these configurations, you might get some linting errors.\nTo fix this, simply use the following command:\n\n```console\n$ ./node_modules/.bin/eslint --fix .\n```\n\nThis will fix all the errors that ESLint or its plugins can handle.\n\n## CSS Linting\n\n[stylelint](http://stylelint.io/) is a must have CSS linter; the default\nboilerplate provides you with a nice [standard set of rules](https://github.com/stylelint/stylelint-config-standard)\nfor modern CSS development.\n","__filename":"docs/advanced/good-practices.md","__url":"/docs/advanced/good-practices/","__resourceUrl":"/docs/advanced/good-practices/index.html","__dataUrl":"/docs/advanced/good-practices/index.html.722790342d6eb599351fe10a4dd3260f.json"}